# This is a sample Python script.
import glob

import numpy as np
from tools import sort_humanly
import time
import cv2
import os


def graph_cut(image,mask):
    # Use a breakpoint in the code line below to debug your script.

    kernel = np.ones((3, 3), np.uint8)
    mask = cv2.dilate(mask, kernel, iterations=1)
    if np.max(mask)==0 :
        return mask
    # apply a bitwise mask to show what the rough, approximate mask would
    # give us
    roughOutput = cv2.bitwise_and(image, image, mask=mask)
    # # show the rough, approximated output
    mask[mask > 0] = cv2.GC_PR_FGD
    mask[mask == 0] = cv2.GC_BGD
    # allocate memory for two arrays that the GrabCut algorithm internally
    # uses when segmenting the foreground from the background
    fgModel = np.zeros((1, 65), dtype="float")
    bgModel = np.zeros((1, 65), dtype="float")
    # apply GrabCut using the the mask segmentation method
    start = time.time()
    (mask, bgModel, fgModel) = cv2.grabCut(image, mask, None, bgModel,
                                           fgModel, iterCount=5, mode=cv2.GC_INIT_WITH_MASK)
    end = time.time()
    print("[INFO] applying GrabCut took {:.2f} seconds".format(end - start))

    outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD),
                          0, 1)
    outputMask = (outputMask * 255).astype("uint8")
    # apply a bitwise AND to the image using our mask generated by
    # GrabCut to generate our final output image
    output = cv2.bitwise_and(image, image, mask=outputMask)
    return outputMask
    # cv2.imwrite(save_name,outputMask)
    #
    # cv2.imshow("GrabCut Output", output)
    # cv2.imshow("Rough Output", roughOutput)
    # cv2.waitKey(1)
def graphy_cut_onall():
    path_to_img_dirs= 'output'
    path_to_mask_dirs= 'labeled\output'
    if not os.path.exists(path_to_img_dirs) or not os.path.exists(path_to_mask_dirs):
        raise FileNotFoundError('no dirs')
    refined_mask_output_dirs ='./mask_Refine_output/'
    if not os.path.exists(refined_mask_output_dirs):
            os.mkdir(refined_mask_output_dirs)
    img_dirs = sort_humanly(os.listdir(path_to_img_dirs))
    mask_dirs = sort_humanly(os.listdir(path_to_mask_dirs))
    for img_dir, mask_dir in zip(img_dirs, mask_dirs):

        imgs = sort_humanly(glob.glob(f'{path_to_img_dirs}/{img_dir}/*.jpg'))
        masks = sort_humanly(glob.glob(f'{path_to_mask_dirs}\{mask_dir}/*.jpg'))

        # codec = cv2.VideoWriter_fourcc(*'mp4v')
        frameSize_s = cv2.imread(imgs[0]).shape[:2]
        rotation_flag = False

        if frameSize_s[0] / frameSize_s[1] > 1:  # (768, 1024)
            print('rotation start')
            rotation_flag = True
            # name = os.path.split(img_dir)[-1]+ '_rotated.mp4'
        # else:
        #     print(img_dir, mask_dir, 'skiped')
        #     continue
        name = os.path.split(img_dir)[-1]
        out_path = os.path.join(refined_mask_output_dirs, name)
        # print(img_dir, mask_dir)
        if not os.path.exists(out_path):
            os.mkdir(out_path)
        for i, m in zip(imgs, masks):
            img = cv2.imread(i)
            mask = cv2.imread(m, 0)

            if rotation_flag:
                mask = np.rot90(mask, k=-1)

            refined_mask = graph_cut(img, mask)
            save_name=os.path.join(out_path, os.path.split(m)[-1] )

            cv2.imwrite(save_name, refined_mask)

if __name__ == '__main__':
    graphy_cut_onall()

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
